apply plugin: "java"

import java.nio.file.*
import java.nio.file.attribute.BasicFileAttributes
import org.gradle.api.file.RelativePath

sourceCompatibility = 1.7
sourceSets.main.java.srcDirs = ["src/"]
sourceSets.main.resources.srcDirs = ["../core/assets"]

project.ext.mainClassName = "de.grnx.mapeditor.DesktopLauncher"
project.ext.assetsDir = new File("../core/assets")

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

task listPngFiles_dpr {
    //uses absolute path
        def internalBlocksDir = new File(project.assetsDir, "internalBlocks")
        def pngFiles = fileTree(dir: internalBlocksDir, include: '**/*.png').files
        file(new File(internalBlocksDir, 'res.txt')).text = pngFiles.join('\n')
    
}

task listPngFiles {
    def internalBlocksDir = new File(project.assetsDir, "internalBlocks")
    def pngFiles = fileTree(dir: internalBlocksDir, include: '**/*.png').files

    // Modify strings and concatenate them into a single string
	def modifiedStrings = pngFiles.collect { file ->
		 subtractParentPath(file, internalBlocksDir.getName())
		
	}.join('\n')

	file(new File(internalBlocksDir, 'res.txt')).text=modifiedStrings
}

def subtractParentPath(File f, String topLevel) {
    def parentDir = f.getParentFile().getName()
    if (parentDir != topLevel) {
        return new File(parentDir, f.getName()).toString()
    } else {
        return f.getName()
    }
}


task dist(type: Jar) {
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
    
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    
    with jar
	
    doLast {
        def projectRoot = project.projectDir.parentFile.parentFile
        def relativePath = projectRoot.toPath().relativize(archivePath.toPath()).toString()
        println "Jar file created at: ..\\${relativePath}"
    }
}

jar.dependsOn(listPngFiles, build, classes)

eclipse.project.name = appName + "-desktop"
